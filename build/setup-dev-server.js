const fs = require('fs');
const path = require('path');
const MFS = require('memory-fs'); /* A simple in-memory filesystem. Holds data in a javascript object. */
const webpack = require('webpack');
const chokidar = require('chokidar');
const clientConfig = require('./webpack.client.config');
const serverConfig = require('./webpack.server.config');

const readFile = (fs, file) => {
	try {
		return fs.readFileSync(path.join(clientConfig.output.path, file), 'utf-8');
	} catch (e) {}
};

/**
 * 开发模式时, server.js的拓展
 * @param {any} app 服务器对象
 * @param {string} templatePath 模板路径
 * @param {function} cb 回调函数, 能生成新的渲染器
 */
module.exports = function setupDevServer(app, templatePath, cb) {
	let bundle;
	let template; /* 模板内容 */
	let clientManifest;

  /* 创建Promise对象, 把resolve方法保存在外面 */
	let ready;
	const readyPromise = new Promise((r) => {
		ready = r;
  });
  
	const update = () => {
		if (bundle && clientManifest) {
			ready();
			cb(bundle, {
				template,
				clientManifest,
			});
		}
	};

	/* 读取页面模板 */
  template = fs.readFileSync(templatePath, 'utf-8');
  /* chokidar替换fs.watch */
  /* 监听: template.html模板的更改 */
	chokidar.watch(templatePath).on('change', () => {
		template = fs.readFileSync(templatePath, 'utf-8');
		console.log('template模板更新了');
		update();
	});

  /* 更新webpack配置, 以适配 hot middleware */
	clientConfig.entry.app = ['webpack-hot-middleware/client', clientConfig.entry.app];
	clientConfig.output.filename = '[name].js';
	clientConfig.plugins.push(new webpack.HotModuleReplacementPlugin(), new webpack.NoEmitOnErrorsPlugin());

	// dev middleware
	const clientCompiler = webpack(clientConfig);
	const devMiddleware = require('webpack-dev-middleware')(clientCompiler, {
		publicPath: clientConfig.output.publicPath,
		noInfo: true,
	});
	app.use(devMiddleware);
	clientCompiler.plugin('done', (stats) => {
		stats = stats.toJson();
		stats.errors.forEach((err) => console.error(err));
		stats.warnings.forEach((err) => console.warn(err));
		if (stats.errors.length) {
			return;
		}
		clientManifest = JSON.parse(readFile(devMiddleware.fileSystem, 'vue-ssr-client-manifest.json'));
		update();
	});

	// hot middleware
	app.use(require('webpack-hot-middleware')(clientCompiler, { heartbeat: 5000 }));

	// watch and update server renderer
  const serverCompiler = webpack(serverConfig);
  /* 内存中的文件系统, 用object存储数据 */
	const mfs = new MFS();
	serverCompiler.outputFileSystem = mfs;
	serverCompiler.watch({}, (err, stats) => {
		if (err) {
			throw err;
		}
		stats = stats.toJson();
		if (stats.errors.length) {
			return;
		}

		// read bundle generated by vue-ssr-webpack-plugin
		bundle = JSON.parse(readFile(mfs, 'vue-ssr-server-bundle.json'));
		update();
	});

	return readyPromise;
};